from g4f.client import Client
from dublib.Polyglot import Markdown
from Source.Functions import GetTodayDate

import g4f
import random

class Neurwork:

	def __match_rus(self, character, alphabet=set('–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')):
		
		return character.lower() in alphabet
	
	def __IsTextRussian(self, text):
		IsRussian = True 
		if not text:
			IsRussian = False
		else:
			for Character in text:
				if Character.isalpha() and not self.__match_rus(Character):
					IsRussian = False
					break

		return IsRussian
	
	def __is–°ontainsWord(self, text):
		black_list = ["—Ç–µ—Ä–∞–ø–µ–≤—Ç", "–ø—Å–∏—Ö–æ–ª–æ–≥", "–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π", "–≥–∞–¥–∞–ª–∫–∏", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–∞–≤–∞–π", "—Å–æ–≤–µ—Ç", "–∑–≤–µ–∑–¥—ã", "—Å–æ—á–µ—Ç–∞–Ω–∏–µ"]

		Isnot–°ontains = True

		split_segments = text.split(" ")
		for split_segment in split_segments:
			if split_segment.lower().replace(",", "").replace("**", "") in black_list:
				Isnot–°ontains = False
				break

		return Isnot–°ontains

	def __GetGoodResult(self, text):
		Result = False
		if self.__IsTextRussian(text) and self.__is–°ontainsWord(text): Result = True

		return Result

	def __init__(self) -> None:
			self.__Client = Client()
		
	def GetResponce(self, first_zodiak: str, second_zodiak: str) -> str:
		Result = False
		Percent = random.randint(1, 100)
		
		Title = f"*üíû {first_zodiak} & {second_zodiak} üíû*"
		Today = Markdown(GetTodayDate()).escaped_text

		while not Result:
			
			Request = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 2 –∞–±–∑–∞—Ü–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è {first_zodiak} –∏ {second_zodiak} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ –∏—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å {Percent}%."
			Request += "–ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
			Request += "–í—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü —Ä–µ–∑—é–º–∏—Ä—É—é—â–∞—è –¥–ª—è —ç—Ç–∏—Ö –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞"
			Request += "–ù–µ –¥–æ–±–∞–≤–ª—è–π –≤ —Ç–µ–∫—Å—Ç –∑–Ω–∞–∫ %, —Ä–∞–∑–º–µ—Ç–∫—É –∏ —Å—Ç—Ä–æ—á–∫–∏."
			Response = self.__Client.chat.completions.create(model = "gpt-4", provider = g4f.Provider.Ai4Chat, messages = [{"role": "user", "content": Request}])
			Text_response = Response.choices[0].message.content.strip().replace("\n", "\n\n")
			MainText = Markdown(Text_response).escaped_text

			try:
				Result = self.__GetGoodResult(MainText)
			except: pass

		Text = Title + "\n" + f"*–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∞ {Today}*" + "\n\n" + MainText + "\n\n" + f"*üí† –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è __\\- {Percent}%__*"
		
		return Text