from dublib.Methods.JSON import ReadJSON
from dublib.TelebotUtils import UsersManager
from dublib.TelebotUtils.Cache import TeleCache
from dublib.Methods.Filesystem import MakeRootDirectories
from dublib.Methods.System import Clear
from Source.Neurowork import Neurwork
from Source.Updater import Updater
from Source.Functions import DeleteSymbols, GetTodayDate
from Source.ReplyKeyboards import ReplyKeyboards
from Source.InlineKeyboards import InlineKeyboards
from apscheduler.schedulers.background import BackgroundScheduler

import telebot
import logging
from telebot import types

Clear()

Settings = ReadJSON("Settings.json")
MakeRootDirectories(["Data/Users"])

logging.basicConfig(level=logging.INFO, encoding="utf-8", filename="LOGING.log", filemode="w",
	format='%(asctime)s - %(levelname)s - %(message)s',
	datefmt='%Y-%m-%d %H:%M:%S')

Bot = telebot.TeleBot(Settings["token"])
usermanager = UsersManager("Data/Users")
ReplyKeyboardBox = ReplyKeyboards()
InlineKeyboardsBox = InlineKeyboards()
neurowork = Neurwork()
updater = Updater(neurowork)
scheduler = BackgroundScheduler()

scheduler.add_job(updater.UpdateJson, 'cron', hour = Settings["updating_time"].split(":")[0], minute = Settings["updating_time"].split(":")[1])
scheduler.start()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞.
Cacher = TeleCache()
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.
Cacher.set_options(Settings["token"], Settings["chat_id"])

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
try:
	File = Cacher.get_cached_file(Settings["path_to_image"], type = types.InputMediaPhoto)
	# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
	FileID = Cacher[Settings["path_to_image"]]
except KeyError:
	pass

@Bot.message_handler(commands=["start"])
def ProcessCommandStart(Message: types.Message):
	User = usermanager.auth(Message.from_user)
	Bot.send_message(
		Message.chat.id, 
		"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ç–∞–π–Ω –≤–∞—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏! –ü—Ä–∏–æ—Ç–∫—Ä–æ–π—Ç–µ –∏—Ö –∑–∞–≤–µ—Å—É –∏ —É–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –∂–µ –≤–∞–º –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –∑–≤–µ–∑–¥—ã! üí´", 
		reply_markup = ReplyKeyboardBox.AddMainMenu()
		)
	Bot.delete_message(Message.chat.id, Message.id)

@Bot.message_handler(content_types = ["text"], regexp = "–û–±—â–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
def ProcessShareWithFriends(Message: types.Message):
	User = usermanager.auth(Message.from_user)

	Bot.send_message(
		Message.chat.id, 
		text = "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
		reply_markup = ReplyKeyboardBox.ZodiacMenu()
		)
	User.set_property("type", "General")
	User.set_expected_type("first_zodiak")
	Bot.delete_message(Message.chat.id, Message.id)
	  
@Bot.message_handler(content_types = ["text"], regexp = "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
def ProcessShareWithFriends(Message: types.Message):
	User = usermanager.auth(Message.from_user)

	Bot.send_message(
		Message.chat.id, 
		text = "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
		reply_markup = ReplyKeyboardBox.ZodiacMenu()
		)
	User.set_property("type", "Today")
	User.set_expected_type("first_zodiak")
	Bot.delete_message(Message.chat.id, Message.id)
	
@Bot.message_handler(content_types = ["text"], regexp = "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏")
def ProcessShareWithFriends(Message: types.Message):
	User = usermanager.auth(Message.from_user)
	try:
		Bot.send_photo(
			Message.chat.id, 
			photo = FileID,
			caption="@Sowmes\\_bot\n@Sowmes\\_bot\n@Sowmes\\_bot\n\n*–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –≥–æ—Ä–æ—Å–∫–æ–ø—É*\n–í—Å–µ –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ –∏ –≤—Å–µ –≥–ª–∞–≤–Ω—ã–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏ üòèü§û", 
			reply_markup=InlineKeyboardsBox.AddShare(), 
			parse_mode= "MarkdownV2"
			)
	except NameError:
		Bot.send_message(
			Message.chat.id, 
			text="@Sowmes\\_bot\n@Sowmes\\_bot\n@Sowmes\\_bot\n\n*–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –≥–æ—Ä–æ—Å–∫–æ–ø—É*\n–í—Å–µ –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ –∏ –≤—Å–µ –≥–ª–∞–≤–Ω—ã–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏ üòèü§û", 
			reply_markup=InlineKeyboardsBox.AddShare(), 
			parse_mode= "MarkdownV2"
			)




@Bot.message_handler(content_types = ["text"])
def ProcessShareWithFriends(Message: types.Message):
	User = usermanager.auth(Message.from_user)

	if User.expected_type == "first_zodiak":
		User.set_property("first_zodiak", DeleteSymbols(Message.text))
		Bot.send_message(
			Message.chat.id, 
			text = "–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ —á–µ–ª–æ–≤–µ–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
			reply_markup = ReplyKeyboardBox.ZodiacMenu()
			)
		User.set_expected_type("second_zodiak")
		return
	
	if User.expected_type == "second_zodiak":
		User.set_property("second_zodiak", DeleteSymbols(Message.text))
		if User.get_property("type") == "General":
			Bot.send_message(
				Message.chat.id, 
				text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ–±—â—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.",
				reply_markup = ReplyKeyboardBox.AddMainMenu()
				)
		else:
			Today = GetTodayDate()
			Zodiak_Key = updater.CreateKey(User.get_property("first_zodiak"), User.get_property("second_zodiak"))
			if updater.GetValue(Zodiak_Key, "text") and updater.GetValue(Zodiak_Key, "date") == GetTodayDate():
				Text = updater.GetValue(Zodiak_Key, "text")
			else:
				Text = neurowork.GetResponce(User.get_property("first_zodiak"), User.get_property("second_zodiak"))
				updater.AddText(Text, Zodiak_Key, Today)
			Bot.send_message(
				Message.chat.id, 
				text = Text,
				reply_markup = ReplyKeyboardBox.AddMainMenu(), 
				parse_mode = "MarkdownV2" 
				)
		User.set_expected_type(None)
		return
	
	Bot.delete_message(Message.chat.id, Message.id)
	
Bot.infinity_polling()
