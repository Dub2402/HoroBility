from dublib.Methods.Filesystem import ReadJSON
from dublib.TelebotUtils import UsersManager
from dublib.TelebotUtils.Cache import TeleCache
from dublib.Methods.Filesystem import MakeRootDirectories
from dublib.Methods.System import Clear

from Source.Neurowork import Neurwork
from Source.Updater import Updater
from Source.Functions import DeleteSymbols, GetTodayDate, MirrorText, ChangeMorphology
from Source.ReplyKeyboards import ReplyKeyboards
from Source.InlineKeyboards import InlineKeyboards
from Source.Mailer import Mailer

from apscheduler.schedulers.background import BackgroundScheduler

import telebot
import logging
from telebot import types

Clear()

Settings = ReadJSON("Settings.json")
GeneralTexts = ReadJSON("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.json")
MakeRootDirectories(["Data/Users"])

logging.basicConfig(level=logging.INFO, encoding="utf-8", filename="LOGING.log", filemode="w", force=True,
	format='%(asctime)s - %(levelname)s - %(message)s',
	datefmt='%Y-%m-%d %H:%M:%S')

logging.getLogger("pyTelegramBotAPI").setLevel(logging.WARNING)
logging.getLogger("requests").setLevel(logging.WARNING)

Bot = telebot.TeleBot(Settings["token"])
usermanager = UsersManager("Data/Users")
ReplyKeyboardBox = ReplyKeyboards()
InlineKeyboardsBox = InlineKeyboards()
neurowork = Neurwork()
updater = Updater(neurowork, Bot, Settings["chat_id"])
scheduler = BackgroundScheduler()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞.
Cacher = TeleCache()
mailer = Mailer(Bot, usermanager, updater, Cacher)

scheduler.add_job(updater.UpdateJson, 'cron', hour = Settings["updating_time"].split(":")[0], minute = Settings["updating_time"].split(":")[1])
scheduler.add_job(mailer.StartMailing, 'cron', hour = Settings["mailing_time"].split(":")[0], minute = Settings["mailing_time"].split(":")[1])
scheduler.start()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.
Cacher.set_options(Settings["token"], Settings["chat_id"])

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
try:
	File = Cacher.get_cached_file(Settings["share_image_path"], type = types.InputMediaPhoto)
	# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
	FileID = Cacher[Settings["share_image_path"]]
except KeyError:
	pass

@Bot.message_handler(commands = ["start"])
def ProcessCommandStart(Message: types.Message):
	User = usermanager.auth(Message.from_user)
	User.set_property("notification_key", None, force = False)
	Bot.send_message(
		Message.chat.id, 
		"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ç–∞–π–Ω –≤–∞—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏! –ü—Ä–∏–æ—Ç–∫—Ä–æ–π—Ç–µ –∏—Ö –∑–∞–≤–µ—Å—É –∏ —É–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –∂–µ –≤–∞–º –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –∑–≤–µ–∑–¥—ã! üí´", 
		reply_markup = ReplyKeyboardBox.AddMainMenu()
		)
	
@Bot.message_handler(commands = ["mailset"])
def ProcessCommandMailset(Message: types.Message):
	User = usermanager.auth(Message.from_user)
	Bot.send_message(Message.chat.id, ("–ñ–µ–ª–∞–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –≥–æ—Ä–æ—Å–∫–æ–ø—É</b>?"), parse_mode = "HTML", reply_markup = InlineKeyboardsBox.notifications())

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("notifications"))
def InlineButton(Call: types.CallbackQuery):
	User = usermanager.auth(Call.from_user)
	Command = Call.data.split("_")[-1]

	if Command == "yes":
		Bot.send_message(
			chat_id = User.id, 
			text = "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
			reply_markup = ReplyKeyboardBox.ZodiacMenu()
			)
		User.set_expected_type("first_zodiak")

	else:
		User.set_property("notification_key", None)
		Bot.edit_message_text(
			text = "–•–æ—Ä–æ—à–æ! –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –≤—ã–±—Ä–∞–≤ –≤ –º–µ–Ω—é –Ω–∏–∂–µ –≤–∞—à–∏ –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ üí´",
			chat_id = User.id,
			message_id = Call.message.id,
			parse_mode = "HTML",
			reply_markup = None
		)

@Bot.message_handler(content_types = ["text"], regexp = "–û–±—â–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
def ProcessShareWithFriends(Message: types.Message):
	User = usermanager.auth(Message.from_user)

	Bot.send_message(
		chat_id = Message.chat.id, 
		text = "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
		reply_markup = ReplyKeyboardBox.ZodiacMenu()
		)
	User.set_property("type", "General")
	User.set_expected_type("first_zodiak")
	  
@Bot.message_handler(content_types = ["text"], regexp = "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
def ProcessShareWithFriends(Message: types.Message):
	User = usermanager.auth(Message.from_user)

	Bot.send_message(
		Message.chat.id, 
		text = "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
		reply_markup = ReplyKeyboardBox.ZodiacMenu()
		)
	User.set_property("type", "Today")
	User.set_expected_type("first_zodiak")
	
@Bot.message_handler(content_types = ["text"], regexp = "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏")
def ProcessShareWithFriends(Message: types.Message):
	User = usermanager.auth(Message.from_user)
	try:
		Bot.send_photo(
			Message.chat.id, 
			photo = FileID,
			caption="@Sowmes\\_bot\n@Sowmes\\_bot\n@Sowmes\\_bot\n\n*–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –≥–æ—Ä–æ—Å–∫–æ–ø—É*\n–í—Å–µ –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ –∏ —Å–∞–º—ã–µ –≥–ª–∞–≤–Ω—ã–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏ ü§û‚ò∫Ô∏èü§û", 
			reply_markup=InlineKeyboardsBox.AddShare(), 
			parse_mode= "MarkdownV2"
			)
	except NameError:
		Bot.send_message(
			Message.chat.id, 
			text="@Sowmes\\_bot\n@Sowmes\\_bot\n@Sowmes\\_bot\n\n*–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –≥–æ—Ä–æ—Å–∫–æ–ø—É*\n–í—Å–µ –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ –∏ —Å–∞–º—ã–µ –≥–ª–∞–≤–Ω—ã–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏ ü§û‚ò∫Ô∏èü§û", 
			reply_markup=InlineKeyboardsBox.AddShare(), 
			parse_mode= "MarkdownV2"
			)

@Bot.message_handler(content_types = ["text"])
def ProcessShareWithFriends(Message: types.Message):
	User = usermanager.auth(Message.from_user)

	if User.expected_type == "first_zodiak":
		if Message.text not in (
			"‚ôà –û–≤–µ–Ω",
			"‚ôâ –¢–µ–ª–µ—Ü",
			"‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã",
			"‚ôã –†–∞–∫",
			"‚ôå –õ–µ–≤",
			"‚ôç –î–µ–≤–∞",
			"‚ôé –í–µ—Å—ã",
			"‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω",
			"‚ôê –°—Ç—Ä–µ–ª–µ—Ü",
			"‚ôë –ö–æ–∑–µ—Ä–æ–≥",
			"‚ôí –í–æ–¥–æ–ª–µ–π",
			"‚ôì –†—ã–±—ã"
			): Bot.send_message(
					text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–≤–æ–µ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞",
					chat_id = User.id,
					reply_markup = ReplyKeyboardBox.ZodiacMenu()
				)
		else:
			User.set_property("first_zodiak", DeleteSymbols(Message.text))
			Bot.send_message(
				Message.chat.id, 
				text = "–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ —á–µ–ª–æ–≤–µ–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
				reply_markup = ReplyKeyboardBox.ZodiacMenu()
				)
			User.set_expected_type("second_zodiak")
		return
	
	if User.expected_type == "second_zodiak":
		if Message.text not in (
			"‚ôà –û–≤–µ–Ω",
			"‚ôâ –¢–µ–ª–µ—Ü",
			"‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã",
			"‚ôã –†–∞–∫",
			"‚ôå –õ–µ–≤",
			"‚ôç –î–µ–≤–∞",
			"‚ôé –í–µ—Å—ã",
			"‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω",
			"‚ôê –°—Ç—Ä–µ–ª–µ—Ü",
			"‚ôë –ö–æ–∑–µ—Ä–æ–≥",
			"‚ôí –í–æ–¥–æ–ª–µ–π",
			"‚ôì –†—ã–±—ã"
			): Bot.send_message(
					text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–≤–æ–µ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞",
					chat_id = User.id,
					reply_markup = ReplyKeyboardBox.ZodiacMenu()
				)
		else:
			FirstZodiak = User.get_property("first_zodiak")
			User.set_property("second_zodiak", DeleteSymbols(Message.text))
			SecondZodiak = User.get_property("second_zodiak")
			File = Cacher.get_cached_file(path = f"Materials/{FirstZodiak}/{SecondZodiak}.jpg", type = types.InputMediaPhoto)
			File = Cacher.get_cached_file(path = f"Materials/{SecondZodiak}/{FirstZodiak}.jpg", type = types.InputMediaPhoto)
			Photo_Original = Cacher[f"Materials/{FirstZodiak}/{SecondZodiak}.jpg"]
			Photo_Mirror = Cacher[f"Materials/{SecondZodiak}/{FirstZodiak}.jpg"]
			match User.get_property("type"):
				case "General":
					Text = GeneralTexts[f"{FirstZodiak}_{SecondZodiak}"].split("üè†")
					Bot.send_photo(
						chat_id = Message.chat.id, 
						photo = Photo_Original,
						caption = Text[0],
						reply_markup = ReplyKeyboardBox.AddMainMenu(),
						parse_mode= "HTML"
						)
					Bot.send_photo(
						chat_id = Message.chat.id, 
						photo = Photo_Mirror,
						caption = Text[-1],
						reply_markup = ReplyKeyboardBox.AddMainMenu(),
						parse_mode= "HTML", 
						show_caption_above_media = True
						)
					
				case "Today":
					Today = GetTodayDate()
					Zodiak_Key = updater.CreateKey(FirstZodiak, SecondZodiak)
					if updater.GetValue(Zodiak_Key, "text") and updater.GetValue(Zodiak_Key, "date") == GetTodayDate():
						Text = updater.GetValue(Zodiak_Key, "text")
					else:
						Text = neurowork.GetResponce(FirstZodiak, SecondZodiak)
						updater.AddText(Text, Zodiak_Key, Today)
					if updater.isReversed(FirstZodiak, SecondZodiak):
						Text = MirrorText(Text, FirstZodiak, SecondZodiak)
						Text = ChangeMorphology(Text, FirstZodiak, SecondZodiak)
						Bot.send_photo(
							Message.chat.id, 
							photo = Photo_Original,
							caption = Text,
							reply_markup = ReplyKeyboardBox.AddMainMenu(), 
							parse_mode = "MarkdownV2" 
							)
					else:
						Bot.send_photo(
							Message.chat.id, 
							photo = Photo_Original,
							caption = Text,
							reply_markup = ReplyKeyboardBox.AddMainMenu(), 
							parse_mode = "MarkdownV2" 
							)
				case None:
					User.set_property("notification_key", [FirstZodiak, SecondZodiak])
					Bot.send_message(
					text = "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏! ‚ú®Ô∏è",
					chat_id = User.id,
					reply_markup = ReplyKeyboardBox.AddMainMenu()
				)

			User.set_expected_type(None)
			User.set_property("type", None)
			return
	
Bot.infinity_polling()

